import os
import time
import sys
import clr
import threading
import numpy as np


class LTS300M:
    def __init__(self, ID, serial_num, settings_lib) -> None:
        self.ID = ID
        self.axis = ID[0]
        self.serial_num = serial_num
        self.settings_lib = settings_lib

        # Connect to device
        self.device = LongTravelStage.CreateLongTravelStage(self.serial_no)
        try:
            self.device.Connect()
        except Exception as exception:
            print(f'Exception raised when trying to connect to LTS device {self.ID}: {exception}')


        # Ensure that the device settings have been initialized
        if not device.IsSettingsInitialized():
            device.WaitForSettingsInitialized(10000)  # 10 second timeout
            assert device.IsSettingsInitialized() is True

        # Start polling and enable
        self.device.StartPolling(settings_lib['polling_rate'])
        time.sleep(settings_lib['polling_rate'] * 2 / 1000)  # Wait for two polling cycles
        self.device.EnableDevice()
        time.sleep(settings_lib['polling_rate'] * 2 / 1000)  # Wait for device to enable

        # Load info and configurations
        self.device_info = self.device.GetDeviceInfo()
        self.motor_config = self.device.LoadMotorConfiguration(self.serial_num)

        # Set homing parameters
        home_params = self.device.GetHomingParams()
        home_params.Velocity = Decimal(self.settings_lib['home_velocity'])
        self.device.SetHomingParams(home_params)

        # Set movement parameters
        vel_params = self.device.GetVelocityParams()
        vel_params.MaxVelocity = Decimal(self.settings_lib['move_velocity'])
        self.device.SetVelocityParams(vel_params)

        # Set jogging parameters
        # todo: set parameters


    def terminate(self):
        self.device.StopPolling()
        self.device.Disconnect()


    def change_setting(self, setting, value):
        self.settings_lib[setting] = value

    def home(self):
        try:
            self.device.Home(self.settings_lib['home_timeout'])
        except Exception as exception:
            print(f'Exception raised when homing LTS device {self.ID}: {exception}')

    def move_to(self, position):
        try:
            self.device.MoveTo(position, self.settings_lib['home_timeout'])
        except Exception as exception:
            print(f'Exception raised when moving LTS device {self.ID}: {exception}')